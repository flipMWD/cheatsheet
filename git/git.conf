#-------------------------------
# Git Interface
#-------------------------------

[    Stash    ] [  Workspace  ] [    Index    ] [ Local  Repo ] [ Remote Repo ]

                        <------------------- clone --------------------|
                        |--- status ---|
                        |-- add [-u] -->
                        |----- mv ----->
                        |----- rm ----->
                                        |--- commit --->
                        |---------- commit -a --------->
                        |---- diff ----|
                        |-------- diff <commit> -------|
                                        | diff --cached|
                        <-- checkout --|
                        <------ checkout <commit> -----|
                        <---------- switch ------------|
                                                        |---- push ---->
                                                        <---- fetch ---|
                        <------------------- pull ---------------------|
                        <-------- cherry-pick ---------|
                        <---------- merge -------------|
                        <---------- rebase ------------|
                        <---------- revert ------------|
                        <-- restore ---|
                                        < reset --soft |
                        <------- reset --hard ---------|
        <--------- stash push ---------|
        |----- stash pop / apply ------>
        |--------------- stash branch ----------------->
                |--- clean ----|
                                |- rm --cached |
                                |reset <commit>|
|- stash list -|                                |--- branch ---|
|- stash show -|                                | diff <c> <c> |
|- stash drop -|                                |- rebase -i --|
|- stash clear |                                |---- log -----|

# Source: http://ndpsoftware.com/git-cheatsheet.html

#-------------------------------
# Git Commands
#-------------------------------

git init
git config --global user.name ''
git config --global user.email ''
git config --global core.editor vim

git status
-s, --short

git add <file> | *.ext
| .                         # all files under current dir
| :/                        # all files under git directory
| :!                        # do not add (eg. git add -- . ':!file1' ':!file2'
-p, --patch                 # interactvely add patches of code

git rm <file>               # delete file
--cached <file>             # unstage but keep tracked file

git mv <old> <new>          # renaming or moving dir

git restore <file>          # restore file deleted but was staged
--staged                    # remove tracked file from index

git commit
-m, --message <msg>
-a, --all                   # automatically add all tracked files
--amend                     # include tracked files to last commit
--no-edit                   # use same commit message
-S                          # signing with GPG key

git log
--all                       # all refs listed as commits
--graph
--decorate                  # / format list:
--abbrev-commit             # | %[h|H] commit hash, %t tree, %p parent,
--show-signature            # | %an author name,   %ae email, %ad date,
--oneline                   # | %cn commiter name, %cn email, %cd date
--pretty=oneline            # | %C[red|green|blue|reset] color output
--pretty=format:'<fmt>'     #<  %[a|c]r date relative, %s subject

git reflog                  # records previous changes to repo, up to 30 days
| expire --expire=<time>    # prune entries older than <time>
    [<refspec>]

git rebase <commit>         # rebase every commit after listed commit
| <upstream>
| <branch>                  # rebase to the current state of branch
|                           # A -- B -- E -- F <master>
|                           #      '- C -- D <new-branch> -> (rebase onto master)
|                           #
|                           # A -- B -- E -- F <master>
|                           #                '- G -- H <new-branch>
| upstream-branch
-i, --interactive
> pick                      # default
> edit                      # modify files (must rebase --continue after)
> reword                    # change commit message
> drop                      # ignore a full commit
> squash                    # join commit into another, concatenate messages
> fixup                     # does the same as squash without the commit message

git cherry-pick             # pick a few commits from another branch
| <commit>
| <from-c>..<to-c>

git reset <commit>          # restore repo to previous commit
--hard                      # delete files
--soft                      # keep files

git branch                  # lists all branches
| <branch>                  # create new branch
-d <branch>                 # delete local branch | git push -d <remote> <branch>
-a                          # list all remote branches
-r                          # list remote branches only
-vv                         # very verbose
--set-upstream-to=
    <remote>/<branch>       # set localb to track existing remoteb

git stash                   # saves changes as blobs and reset to prev HEAD
| list                      # lists all stashed changesets
| branch
| <branch>
| push
| pop                       # adds back all changes and call git status
| apply                     # same as pop without deleting the stash
| drop                      # discard most recently stashed changeset
| <stash>
-m, --message <msg>         # create a message to indicate content of stash

git checkout                # lists tracked files in current branch
-b <branch>                 # create and check new branch
| <branch>                  # visits branch (discards current changes)
| <commit>                  # create new branch at commit, and checkout
| HEAD <file>               # restore deleted file uncommitted
-r                          # list all remote tracked branches
-a                          # list all local and remote branches

git push
| <remote> --delete <branch>
--all <remote>              # pushes all local branches to remote named origin
-u, --set-upstream          # set current or listed branch to this remote
--delete <branch>           # git push <remote> --delete <branch> to remove
--force-with-lease          # only pushes history changes if it matches local

git diff                    # compare unstaged to previous commit
| <commit>
| <from-c> <to-c>           # compare older and newer commits
| <branch>
| <remote>
--cached                    # diff between index and commit HEAD
--staged                    # diff between workspace and index

git apply                   # apply diff/patch to current branch

git merge <branch>          # merges current branch with another branch
--abort                     # cancel merging mid-conflict
--verify-signatures         # only merge if commits are signed
-S                          # sign merge commit

git mergetool               # can be configured to use vimdiff
<<<<<<< HEAD                # merge conflict markers
// code1
=======
// code2
>>>>>>> <branch>

git remote
show <remote>               # lists fetch URL, local and remote branches

git fetch                   # brings to local repo an updated copy of the
                            # remote repo (keeps local and remote separated)
-all                        # fetches all branches from remotes

git pull                    # combination of fetch and merge
-all                        # pulls all branches from remotes

git tag <tag>               # create a unsigned tag lightweight tag
-s '<msg>'                  # signed tag, msg is mandatory
-a                          # include a tagger annotation
-m '<msg>'                  # include a messsage
-v <tag>                    # verify

git show <commit> <tag>     # show <commit> or <tag>

git ls-files                # list all tracked files
--stage                     # staged files only

git show-branch             # show divergence in branches
| +*                        # + other branch, * same branch, +* common ancestor

git ls-remote               # list all remote refs for HEAD and branches
git show-ref                # show all refs under .git/refs/*

#-------------------------------
# Common Uses
#-------------------------------

# Create Remote for Local Repo
git remote add <remote> https://github.com/user/repository-name.git
git push -u <remote> <branch>
git pull

# Cloning and Modifying Code on Alternate Branch
git clone https://github.com/user/repository-name.git
git checkout -b <alt-branch>
git push --set-upstream <remote> <alt-branch>

# Merging from Alternate Branch
git pull
git checkout <alt-branch>
git add .
git commit -m <message>
git checkout <master-branch>
git merge <alt-branch>
git branch -D <alt-branch>  # force delete
git push

# Rebasing onto updated master
git checkout master
git pull [--rebase | --force]
git checkout <branch>
git rebase master
git push --force-with-lease

# Fork from Non-Github Repo
git clone https://github.com/user/new-repo
cd new-repo
git remote add <remote:upstream> https://website.com/orig-repo
git fetch <remote:upstream>
git merge <remote:upstream>/<branch:master>
git push <remote:origin> <branch:master>
git checkout -b <new-branch>
git push --set-upstream <remote:origin> <new-branch>

git pull <remote:upstream> <branch:master>
git push <remote:origin> <branch:master>

# Apply Diff from Commit Range to Current Branch
git diff <commit-start> <commit-end> <file> | git apply

# Testing and Implementing Feature
git checkout -b <new-branch>
git commit
git rebase <main-branch>
git checkout <main-branch>
git merge --ff-only <new-branch>
git branch -d <new-branch>

# Signing a Verified Commit/Tag with GPG Key Pair
gpg --list-keys
git config --global user.signingKey <KEY-ID>
git commit -S -m '<msg>'
git log --show-signature
git tag -s -m '<msg>' <tag>
git show <tag>

# Grab commits
git graph | sed 's/^[^[:alpha:]]\+\s\+\([a-z0-9]\+\).*/\1/g'

#-------------------------------
# Config File / Refspec
#-------------------------------

# Global
~/.gitconfig
[user]
    name = User Name
    email = username@example.com
    signingKey = <email> || <KEY-ID>

[commit]
    gpgsign = true

[tag]
    gpgSign = true

# Local
.git/config
[remote "origin"]
    url = https://github.com/username/repository-name
    fetch = +refs/heads/*:refs/remotes/origin/*

# Rules for Refspec ( [+]<src>:<dst> )
+                           # apply the rule without failure, even if in a
                            # non-fast-forward manner, such as:
                            # A --- B <-(master)
                            # A --- B <-(origin/master)(master) # pull

                            # [+] will accept a non-fast-forward
                            # A --- C <-(master) # reset & push --force
                            # A --- B <-(master)
                            #  \
                            #   C <-(origin/master)

refs/heads/*                # source pattern (from origin/.git/refs/heads)
:refs/remotes/origin/*      # destination pattern
                            # (to local/.git/refs/remotes/origin/*)

#-------------------------------
# Git Internal Develpment
#-------------------------------

# Overview | Python syntax
type blob   = array<byte>
type tree   = map<string, tree | blob>
type commit = struct {
    parents:  array<commit>
    author:   string
    messsage: string
    snapshot: tree
}
type object = blob | tree | commit
objects     = map<string, object>
def store(o)
    id = sha1(o)            # 40 char hash ID
    objects[id] = o
def load(id)
    return objects[id]
references = map<string, string>

# Object Storage | Ruby syntax
content = 'content of filename'
header  = 'blob #{content.length}\0'
store   = header + content

require 'digest/sha1'
sha1 = Digest::SHA1.hexdigest(store)
require 'zlib'
zlib_content = Zlib::Deflate.deflate(store)     # compress content

path = '.git/objects' + sha1[0,2] + '/' + sha1[2,38]
require 'fileutils'
FileUtils.mkdir_p(File.dirname(path))
File.open(path, 'w') { |f| f.write zlib_content }

#-------------------------------
# Git - From The Bottom Up
#-------------------------------

git hash-object <file>      # print object hash, -w[rite] to repository

git cat-file -t <hash>      # verify object as commit, tag, tree or blob
git cat-file -p <hash>      # figures out whats the type of object from hash

git cat-file commit <hash>  # tree, parent commit, author, committer, message
git cat-file tree <hash>    # tree keeps other trees, and blobs file data
git cat-file blob <hash>    # file content, created when staged

# Annotated tags are like commit objects, but can point to any object
# Lightweight tags are not objects, just fixed pointers, unlike branches
git cat-file tag <hash>     # object <hash>, type obj, tag name, tagger, msg

git ls-tree <commit>        # show trees and leaves (blobs)
100644 <object> eb43366e263b0c92e240c81fd400da41c8e9b891    <filename>
└┤│└┬┘
 ││ └─ permissions
 │└─── set-uid 4, set-gid 2, sticky bit 1
 └──── socket 14, link 12, file 10, block 06, dir 04, char 02, FIFO 01

git rev-parse <commit-ref>  # show commit hash

# Objects
commit (references)> tree (holds)> blob (contains)> content

# Raw Committing a Tree, same as git commit -m '<msg>'
git hash-object -w <filename>                   # create blob and write to repo
git update-index --add --cacheinfo <filemode> <obj> <hash> <filename>
git read-tree --prefix=<filename> <tree-hash>   # stage a tree
git write-tree                                  # create an object for tree
echo '<msg>' | git commit-tree <tree-hash>      # [-p <parent-commit>]
echo <commit-hash> > .git/refs/heads/master     # register commit object, or
git update-ref <refspec:refs/heads/master> <commit-hash>
git symbolic-ref HEAD refs/heads/master         # future commits update HEAD

# Quick description of commits and aliases
origin and upstream are aliases for remote URLs
master and alt-branches are aliases for commits
tags are aliases with extra messages, always attatched to the same commit-hash
HEAD points to the tip of a commit list, parent points to ancestor

# Committing to a branch extends only its own line of ancestry
commit^  references parent of commit, first parent by default if multiple
commit^2 is the second parent
commit^^ grandparent, can be applied successively
commit~3 references the nth ancestor, same as commit^^^
commit^{tree} reference the tree of commit, rather than commit itself
stash@{0}^{tree} show tree-hash of stash reflog commit
commit1..commit2  references from (but not including) 1 up to 2
commit1...commit2 only references unique commits between two branches, not both
..commit omitted commits refer to HEAD

# More ways of referencing
--since='2 weeks ago'
--until='1 week ago'
--grep=message\ pattern
--committer=pattern
--author=pattern
--no-merges                 # all commits with only one parent

#-------------------------------
# Pro Git
#-------------------------------

# Remotes
Remote references differ from branches (refs/heads) mainly in that they're
considered read-only. Git won't point a HEAD to one.

# Dumb Protocol Process
git clone http://server/repository-name
GET info/refs                                   # <hash>  refs/heads/master
GET HEAD                                        # ref: refs/heads/master
GET objects/<hash>[0,2]/<hash>[2,38]            # HEAD commit, zlib-uncompress

git cat-file -p <commit-hash>                   # hashes from tree and parent
tree <tree-hash>
parent <commit-hash>
<author>
<committer>
<msg>

GET objects/<commit-hash>[0,2]/<commit-hash>[2,38]
GET objects/<tree-hash>[0,2]/<tree-hash>[2,38]  # if receives empty, checks pack
GET objects/info/packs                          # P pack-<hash>.pack
GET objects/pack/pack-<hash>.idx                # get SHA1 of objects
GET objects/pack/pack-<hash>.pack               # download packfile

# Smart Protocol Process
# TODO page 460

# Pushing namespaced refspecs
git push <remote> <commit-ref>:refs/heads/optional/<commit-ref>

# Set push namespaced refspec
[remote "origin"]
    url = https://github.com/username/repository-name
    fetch = +refs/heads/*:refs/remotes/origin/*
    push = refs/heads/master:refs/heads/optional/master

# Git stores blobs as loose objects, where each one carries the full content
git gc                      # optimize repository by packing all used objects

# Checks the packed deltas of similar blobs, old blobs reference newer
git verify-pack -v .git/objects/pack/pack-<hash>.idx
                                     file size ─┐   ┌───── size-in-packfile
                                                │   │   ┌─ offset-in-packfile
6d47e559ec3f1a72e682db9f863cd28c8845302b commit 254 166 12
1c74dd6837f5c212a386d550a4b0d2c460f6c7f0 tag    145 130 336
c1c20c6bddea453c5ef430df9dec75dee2675c67 tree   75  84  1085
8e4548e99555162ff6b52b39abde9cbd8271ce27 blob   34  41  1346
af5626b4a114abcb82d63db7c8082c3c4756e51b blob   14  23  1387 1 \
  8e4548e99555162ff6b52b39abde9cbd8271ce27                   │
                              base-hash ─┘            depth ─┘
non delta: <n> objects                          # not deltified
chain length: <depth>: <n> objects              # deltified
.git/objects/pack/pack-<hash>.pack: ok

